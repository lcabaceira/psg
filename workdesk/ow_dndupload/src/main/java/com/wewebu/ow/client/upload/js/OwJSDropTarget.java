package com.wewebu.ow.client.upload.js;

import java.awt.datatransfer.Transferable;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import netscape.javascript.JSObject;

import com.wewebu.ow.client.upload.OwDNDApplet;
import com.wewebu.ow.client.upload.OwDNDException;
import com.wewebu.ow.client.upload.OwDropTarget;

/**
 *<p>
 * JavaScript based implementation of {@link OwDropTarget}.
 *</p>
 *
 *<p><font size="-2">
 * Alfresco Workdesk<br/>
 * Copyright (c) Alfresco Software, Inc.<br/>
 * All rights reserved.<br/>
 * <br/>
 * For licensing information read the license.txt file or<br/>
 * go to: http://wiki.alfresco.com<br/>
 *</font></p>
 *@since 3.2.0.0
 *@see OwDropTarget
 */
public class OwJSDropTarget implements OwDropTarget
{
    private static final Logger LOGGER = Logger.getLogger(OwJSDropTarget.class.getName());

    private Map<String, Set<JSObject>> eventMap = new HashMap<String, Set<JSObject>>();
    private boolean enabled = true;

    /**
     * @param owDNDApplet_p
     */
    public OwJSDropTarget(OwDNDApplet owDNDApplet_p)
    {
    }

    /**
     * This is a bridge between Java an JavaScript. 
     * It invokes all JavaScript functions registered as listeners for this type of event.
     */
    public void fire(String eventType_p, Transferable transferable_p) throws OwDNDException
    {
        OwJSDataTransfer dataTransfer = new OwJSDataTransfer(transferable_p);

        //        String asJavaScript = dataTransfer.asJavaScript();
        //        String strEvent = "eval(" + asJavaScript + ")";
        //        JSObject jsWindow = JSObject.getWindow(this.applet);
        //        JSObject jsEvent = (JSObject) jsWindow.eval(strEvent);

        Set<JSObject> eventList = this.eventMap.get(eventType_p);
        if (eventList != null)
        {
            for (JSObject function : eventList)
            {
                function.call("call", new Object[] { null, dataTransfer });
            }
        }
    }

    /**
     * Called from JavaScript code to add listeners for different event types generated by this Applet.
     * This method was designed to resemble its JavaScript counterpart.
     * 
     * @param eventType_p The type of the event.
     * @param function_p Javascript function object to be executed when this event is fired.
     */
    public void addEventListener(String eventType_p, JSObject function_p)
    {
        Set<JSObject> eventList = this.eventMap.get(eventType_p);
        if (eventList == null)
        {
            eventList = new HashSet<JSObject>();
            this.eventMap.put(eventType_p, eventList);
        }

        eventList.add(function_p);
        LOGGER.log(Level.FINER, "Added listener : " + function_p + " for event : " + eventType_p);
    }

    public boolean isEnabled()
    {
        return this.enabled;
    }

    /**
     * Applets do not obey the modal state so we have implemented a workaround.
     * Call this method from the JavaScript engine to temporary disable the applet.  
     */
    public void disable()
    {
        this.enabled = false;
    }

    /**
     * Applets do not obey the modal state so we have implemented a workaround.
     * Call this method from the JavaScript engine to re-enable the applet.
     */
    public void enable()
    {
        this.enabled = true;
    }
}
