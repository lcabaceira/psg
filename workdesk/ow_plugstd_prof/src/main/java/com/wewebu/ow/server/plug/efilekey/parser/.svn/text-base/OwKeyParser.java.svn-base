/* Generated By:JavaCC: Do not edit this line. OwKeyParser.java */
package com.wewebu.ow.server.plug.efilekey.parser;
import com.wewebu.ow.server.plug.efilekey.pattern.*;
import java.util.*;

import java.io.*;

/**
 *<p>
 * Key Language Parser.
 *</p>
 *
 *<p><font size="-2">
 * Alfresco Workdesk<br/>
 * Copyright (c) Alfresco Software, Inc.<br/>
 * All rights reserved.<br/>
 * <br/>
 * For licensing information read the license.txt file or<br/>
 * go to: http://wiki.alfresco.com<br/>
 *</font></p>
 *@since 3.1.0.0
 */
public class OwKeyParser implements OwKeyParserConstants {

  void error_skipto(int kind) throws ParseException {
  ParseException e = generateParseException();  // generate the exception object.

  //System.out.println(e.getMessage()+(exprException_p!=null?exprException_p.getMessage():""));  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
  }

/***********************************************
 * THE KEY  LANGUAGE GRAMMAR STARTS HERE       *
 ***********************************************/

/*
 * Expression syntax follows.
 */
  final public OwKeyPatternImpl readPatterns() throws ParseException {
        List patterns = null;
    patterns = patterns();
                {if (true) return new OwKeyPatternImpl(patterns);}
    throw new Error("Missing return statement in function");
  }

  final public List patterns() throws ParseException {
   List rightSidePatterns=new LinkedList();
   OwSingleKeyPattern pattern;
    pattern = keyPattern();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROPERTY_NAME:
    case USER_DEFINED_SEQUENCE:
    case 25:
      rightSidePatterns = patterns();
      break;
    default:
      ;
    }
        rightSidePatterns.add(0,pattern);
        {if (true) return rightSidePatterns;}
    throw new Error("Missing return statement in function");
  }

  final public OwSingleKeyPattern keyPattern() throws ParseException {
Token fkToken=null;
OwMetadataReference reference=null;
OwSingleKeyPattern keyPattern=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case USER_DEFINED_SEQUENCE:
      fkToken = jj_consume_token(USER_DEFINED_SEQUENCE);
      break;
    case PROPERTY_NAME:
      fkToken = jj_consume_token(PROPERTY_NAME);
      break;
    case 25:
      reference = propertyReference();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (keyPattern==null)
        {
            keyPattern = new OwSingleKeyPattern();
        }
        if (reference!=null)
        {
        keyPattern.setReference(reference);
        }
        if (fkToken!=null)
        {
                keyPattern.setPrefix(fkToken.image);
        }
        {if (true) return keyPattern;}
    throw new Error("Missing return statement in function");
  }

  final public OwMetadataReference propertyReference() throws ParseException {
    Token propertyName;
    OwMetadataFormatterImpl formatter = null;
    jj_consume_token(25);
    propertyName = jj_consume_token(PROPERTY_NAME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      jj_consume_token(26);
      formatter = formatter();
      break;
    default:
      ;
    }
    jj_consume_token(27);
     {if (true) return new OwMetadataReference(propertyName.image,formatter);}
    throw new Error("Missing return statement in function");
  }

  final public OwMetadataFormatterImpl formatter() throws ParseException {
    Token patternToken;
    patternToken = jj_consume_token(STRING_LITERAL);
                                  {if (true) return new OwMetadataFormatterImpl(patternToken.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public OwKeyParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public OwKeyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OwKeyParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OwKeyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public OwKeyParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new OwKeyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public OwKeyParser(OwKeyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(OwKeyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    /*public static OwExprExpression parse(String expressionString_p) throws ParseException
    {
        OwExprParser parser = new OwExprParser(new StringReader(expressionString_p));
        OwExprExpression expression = parser.ExprExpression();
        return expression;
    }*/
}
